Ext.require([
  'Ext.container.Viewport',
  'Ext.layout.container.Border',
  'GeoExt.tree.Panel',
  'Ext.tree.plugin.TreeViewDragDrop',
  'GeoExt.panel.Map',
  'GeoExt.tree.OverlayLayerContainer',
  'GeoExt.tree.BaseLayerContainer',
  'GeoExt.data.LayerTreeModel',
  'GeoExt.tree.View',
  'GeoExt.tree.Column',
  'GeoExt.ux.GoogleEarthPanel',
  'GeoExt.ux.GoogleEarthClick',

  // Add print Preview + Create PDF 05/08/2012
  'GeoExt.data.MapfishPrintProvider',
  'GeoExt.panel.PrintMap',

  // Add popup + Input Form 05/08/2012
  'GeoExt.window.Popup',
  'Ext.form.Panel',
  'Ext.layout.container.Column',
  'Ext.layout.container.Accordion',
  'Ext.layout.container.Border',
  'Ext.tab.Panel',
  'Ext.form.field.ComboBox',
  'Ext.form.field.Date',
  'Ext.form.field.HtmlEditor',

  // Add kml store
  'GeoExt.data.FeatureStore',
  'GeoExt.data.proxy.Protocol'

]);

Ext.application({
  name: 'Tree',
  launch: function() {
    // DSI location
    var center = new OpenLayers.LonLat(100.5657899,13.89071588);
    var dsi = center.transform(gcs,merc);

    var ctrl = new OpenLayers.Control.NavigationHistory();
    // Add Bing Map
    // API key for http://map.dsi.go.th/dsi
    var apiKey = "AnXErkelqCPb0UC5K-lCookgNa4-IwF1Cehgg9En9wcFz7iGblBxbZfm4484_qqK";

    OpenLayers.ProxyHost = "/cgi-bin/proxy.cgi?url=";

    map = new OpenLayers.Map({
      projection: new OpenLayers.Projection("EPSG:900913"),
      displayProjection: new OpenLayers.Projection("EPSG:4326"),
      units: "m",
      // maxResolution: 156543.0339,
      // maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34,20037508.34, 20037508.34),
      controls: [
        new OpenLayers.Control.PanZoomBar(),
        new OpenLayers.Control.MousePosition({displayProjection: new OpenLayers.Projection("EPSG:24047")}),
        new OpenLayers.Control.Navigation(),
        new OpenLayers.Control.LayerSwitcher(),
        new OpenLayers.Control.OverviewMap(),
        new OpenLayers.Control.ScaleLine({geodesic: true}),
        ctrl
      ]
    });

    map.events.register("click", map, function(e){
      var lonlat = map.getLonLatFromViewPortPx(e.xy).transform(merc, gcs);
      var activelayers = map.getLayersBy("visibility", true);
      for(i=0;i<activelayers.length;i++) {
        if (activelayers[i].name.search('เขต') != -1 || activelayers[i].name.search('ชายเลน') != -1)
        check_forest_info(activelayers[i].name, lonlat);
      }
    });

    map.events.register('changelayer', null, function(evt){
      if (evt.layer.name == 'Google Earth') {
      var o = Ext.getCmp('id_east');
      if (o.collapsed)
        o.expand();
      else
        o.collapse();
      }
    });

    // Create all objects declared in map_utils.js
    create_styles();
    create_layer_vectorLayer();
    create_layer_markers();
    create_layer_hili();

    //should WAIT until user click Add Custom Layer
    //create_layer_pointLayer();

    var toolbarItems = [], action;

    action = Ext.create('GeoExt.Action',{
      tooltip: 'กลับสู่แผนที่เริ่มต้น',
      iconCls: 'zoomfull',
      handler: function(){
        map.setCenter(dsi, 5);
      },
      allowDepress: false
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    // Add my_location
    action = Ext.create('GeoExt.Action',{
      tooltip: 'ไปยังตำแหน่งปัจจุบัน',
      iconCls: 'my_location',
      handler: function(){

        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position){
            var lon = position.coords.longitude;
            var lat = position.coords.latitude;
            var p1 = new OpenLayers.LonLat(lon,lat);
            p2 = p1.transform(gcs,merc);
            map.setCenter(p2, 18);

            var size = new OpenLayers.Size(48,48);
            var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
            var icon = new OpenLayers.Icon(asset_prefix+'/my_locationx.png', size, offset);
            markers.addMarker(new OpenLayers.Marker(p2,icon));
          });
        } else {
          alert("Browser ไม่สนับสนุนฟังก์ชั่นนี้");
        }
        // Ext.Ajax.request({
        //   url: Routes.get_lonlat_from_ip_path()
        //   ,params: {
        //     method: 'GET'
        //     ,format: 'json'
        //   }
        //   ,failure: function(response, opts){
        //     alert("get_lonlat_from_ip.rb > failure");
        //     return false;
        //   }
        //   ,success: function(response, opts){
        //     // var data = eval( '(' + response.responseText + ')' );
        //     // No response from IE
        //     var data = Ext.decode(response.responseText);
        //     var lon = parseFloat(data.lon);
        //     var lat = parseFloat(data.lat);

        //     var p1 = new OpenLayers.LonLat(lon,lat);
        //     p2 = p1.transform(gcs,merc);
        //     map.setCenter(p2, 8);

        //     var size = new OpenLayers.Size(48,48);
        //     var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
        //     var icon = new OpenLayers.Icon(asset_prefix+'/my_locationx.png', size, offset);
        //     markers.addMarker(new OpenLayers.Marker(p2,icon));
        //   }
        // });
      },
      allowDepress: false
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    toolbarItems.push("-");

    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.ZoomBox(),
      tooltip: 'ขยายขนาดภาพแผนที่ (กดปุ่ม Shift ค้างไว้จากนั้น Click Mouse ปุ่มซ้ายมือค้างไว้แล้วลากเป็นกรอบสี่เหลี่ยมได้)',
      map: map,
      iconCls: 'zoomin',
      toggleGroup: 'map'
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.ZoomBox({
        out: true
      }),
      tooltip: 'ย่อขนาดภาพแผนที่ (กดปุ่ม Shift ค้างไว้จากนั้น Click Mouse ปุ่มซ้ายมือค้างไว้แล้วลากเป็นกรอบสี่เหลี่ยมได้)',
      map: map,
      iconCls: 'zoomout',
      toggleGroup: 'map'
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.DragPan({
        isDefault: true
      }),
      tooltip: 'เลื่อนแผนที่ไปในทิศทางต่างๆ',
      map: map,
      iconCls: 'pan',
      toggleGroup: 'map'
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));
    toolbarItems.push("-");

    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.DrawFeature(vectorLayer, OpenLayers.Handler.Point),
      tooltip: 'วางจุดบนแผนที่',
      map: map,
      iconCls: 'drawpoint',
      toggleGroup: 'map'
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    function showWin(map, vectorLayer){
      var winname = "radii";
      var win = new Ext.Window({
        id: winname,
        //height: 200,
        width: 200,
        constrain: true,
        collapsible: true,
        layout: 'fit',
        title: 'ระบุรัศมีที่ต้องการ',
        items: [{
          xtype: 'combo',
          allowBlank: false,
          name: 'Radius',
          forceSelection: true, //limit vals to list
          editable: false, //prevent text being entered
          fieldLabel: 'รัศมี',
          labelWidth: 50,
          emptyText: 'เลือกระยะที่ต้องการ...',
          store: new Ext.data.SimpleStore({
            fields: ['radius', 'value'],
            data: [["100 เมตร", "100"], ["200 เมตร", "200"], ["500 เมตร", "500"], ["1 ก.ม.", "1000"], ["5 ก.ม.", "5000"], ["10 ก.ม.", "10000"]]
          }),
          displayField: 'radius',
          valueField: 'value',
          selectOnFocus: true,
          mode: 'local',
          triggerAction: 'all',
          listeners: {
            select: function(combo, record, index){
              var style_red = {
                strokeColor: "#FF0000",
                fillColor: "#FF7373",
                fillOpacity: 0.5
              };

              var style_yellow = {
                strokeColor: "#FFE400",
                fillColor: "#FFF073",
                fillOpacity: 0.5
              };

              var style_green = {
                strokeColor: "#2BBE00",
                fillColor: "#92ED6B",
                fillOpacity: 0.5
              };

              var style = style_red;

              var radius = record[0].data.value;
              var feature = vectorLayer.features[vectorLayer.features.length - 1];
              if (feature) {
                var centroid = feature.geometry.getCentroid();
                var projection = map.getProjectionObject();
                var sides = 40;
                var new_geom = OpenLayers.Geometry.Polygon.createGeodesicPolygon(centroid, radius, sides, 45, projection);
                //var new_feature = new OpenLayers.Feature.Vector(new_geom);

                if (parseInt(radius) < 501) {
                  style = style_red;
                } else if (parseInt(radius) < 5001) {
                  style = style_yellow;
                } else {
                  style = style_green;
                }

                var new_feature = new OpenLayers.Feature.Vector(new_geom,null,style);

                vectorLayer.addFeatures([new_feature]);
              }
            }
          }
        }]
      });
      win.show();
      var mapId = map.div.id;
      win.alignTo(Ext.getDom(mapId), 'tr-tr', [-150, 6]);
    }

    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.SelectFeature(vectorLayer, {
        hover: false,
        eventListeners: {
          featurehighlighted: function() {
            showWin(map, vectorLayer);
          },
          featureunhighlighted: function() {
            Ext.getCmp('radii').hide();
            Ext.MessageBox.show({
              title:'คำแนะนำ',
              msg: 'ท่านสามารถกดปุ่ม <img src="'+asset_prefix+'/delete.png"/> เพื่อลบการแสดงผล Buffer Zone',
              buttons: Ext.MessageBox.OK,
              icon: Ext.MessageBox.INFO
            })
          }
        }
      }),
      tooltip: 'วาด Buffer รอบจุดที่ต้องการบนแผนที ก่อนใช้งาน กรุณาสร้างจุดที่ต้องการก่อนโดยใช้เครื่องมือ วางจุดบนแผนที่ก่อน กดปุ่มเลือกเครื่องมือนี้ จากนั้นนำ mouse ไป click เลือกจุดดังกล่าว',
      map: map,
      iconCls: 'add_buffer',
      toggleGroup: 'map',
      allowDepress: true
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.DrawFeature(vectorLayer, OpenLayers.Handler.Path),
      tooltip: 'วาดเส้นตรงบนแผนที่',
      map: map,
      iconCls: 'drawline',
      toggleGroup: 'map'
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.DrawFeature(vectorLayer, OpenLayers.Handler.Polygon),
      tooltip: 'วาดรูปหลายเหลี่ยมบนแผนที่',
      map: map,
      iconCls: 'drawpolygon',
      toggleGroup: 'map'
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));
    toolbarItems.push("-");

    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.ModifyFeature(vectorLayer),
      tooltip: 'แก้ไขจุดที่ปรากฏบนแผนที่ (ต้อง Click Mouse บนจุด/เส้น/รูปหลายเหลี่ยม เพื่อกำหนดสิ่งที่ต้องการก่อนทำการแก้ไข)',
      map: map,
      iconCls: 'modifyfeature',
      toggleGroup: 'map'
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    action = Ext.create('GeoExt.Action', {
      control: new OpenLayers.Control.DeleteFeature(vectorLayer),
      tooltip: "ลบทีละรายการ จุด/เส้น/รูปหลายเหลี่ยม",
      map: map,
      iconCls: "deletefeature",
      toggleGroup: "map",
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    // Remove all features replace with DeleteFeature.js (1 at a time)
    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.SelectFeature(vectorLayer),
      tooltip: 'ลบทุกรายการที่ปรากฏบนแผนที่',
      map: map,
      iconCls: 'deleteallfeature',
      toggleGroup: 'map',
      handler: function() {
        if (vectorLayer && vectorLayer.features)
          vectorLayer.removeFeatures(vectorLayer.features);
        if (kml && kml.features) {
          kml.removeFeatures(kml.features);
          map.removeLayer(kml);
        }
        if (Ext.getCmp('radii')) {
          Ext.getCmp('radii').hide();
        }
      },
      allowDepress: true
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    toolbarItems.push("-");

    var show_gsv = function(feat) {
      lon = feat.geometry.x;
      lat = feat.geometry.y;
      var pt = new OpenLayers.LonLat(lon,lat);
      pt.transform(merc, gcs);
      lon = pt.lon;
      lat = pt.lat;
      // var img_url = 'http://maps.googleapis.com/maps/api/streetview?size=400x400&location=' + lat + ',' + lon;
      // img_url += '&sensor=false&key=AIzaSyBa-Aed1-QisFrEs2Vnc0f3hfu_fWgXIl4';
      window.open('http://maps.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon + '&cbp=12,0,0,0,0&output=svembed', '_blank');
      // var html = "<center><img src='" + img_url + "' /></center>";
      // Ext.create("Ext.window.Window", {
      //   title: "<a href='http://maps.google.com/maps?q=&layer=c&cbll=" + lat + "," + lon + "&cbp=12,0,0,0,0&output=svembed' target='_blank'>Google Street View</a> <font color='red'><b>ท่านสามารถใช้เม้าส์คลิกที่ link ด้านซ้ายมือได้</b></font>",
      //   width: 450,
      //   height: 450,
      //   layout: 'fit',
      //   closable: true,
      //   html: html
      // }).show();
    }

    // Add Google Street View Control
    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.DrawFeature(vectorLayer, OpenLayers.Handler.Point, { 'featureAdded': show_gsv}),
      tooltip: 'แสดงภาพจาก Google Street View',
      map: map,
      iconCls: 'show_gsv',
      toggleGroup: 'map',
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    toolbarItems.push("-");

    // Add Input Form 05/08/2012
    action = Ext.create('GeoExt.Action', {
     iconCls: "info"
     ,id: 'id_select_feat'
     ,control: frm_input_ctrl
     ,tooltip: 'แบบฟอร์มนำเข้าข้อมูลจากผู้ใช้งาน'
     ,map: map
     ,enableToggle: true
     ,toggleGroup: "map"
     ,allowDepress: true
     ,handler: function() {
       if (pointLayer && pointLayer.visibility == true)
         pointLayer.setVisibility(false);
     }
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    // toolbarItems.push("-");

    // Add Input Form 05/08/2012
    if(username){
      action = Ext.create('GeoExt.Action', {
        iconCls: "i2"
        ,id: 'id_select_feati2'
        ,control: frm_input_ctrli2
        ,tooltip: 'แบบฟอร์มนำเข้าข้อมูลจากผู้ใช้งาน'
        ,map: map
        ,enableToggle: true
        ,toggleGroup: "map"
        ,allowDepress: true
        ,handler: function() {
          vectorzindex = vectorLayer.getZIndex();
          vectorLayer.setZIndex(999);
          if (pointLayer && pointLayer.visibility == true)
            pointLayer.setVisibility(false);
        }
      });
      toolbarItems.push(Ext.create('Ext.button.Button', action));
    }

    // Add Button Custom Layer (pointLayer) to map
    var pl_tta = "เพิ่มชั้นข้อมูลของผู้ใช้งาน";
    var pl_ttx = "ลบชั้นข้อมูลของผู้ใช้งาน";
    var btn_custom_layer = new Ext.Button({
      iconCls: 'add_layer'
      ,tooltip: pl_tta
      ,enableToggle: false
      ,pressed: false
      ,handler: function() {
        if (this.iconCls == 'add_layer') {
          if (pointLayer) { // just in case
            map.removeLayer(pointLayer);
            pointLayer = null;
          }
          create_layer_pointLayer();
          map.addLayer(pointLayer);
          this.setIconCls('del_layer');
          this.setTooltip(pl_ttx);
        } else {
          map.removeLayer(pointLayer);
          pointLayer = null;
          this.setIconCls('add_layer');
          this.setTooltip(pl_tta);
        }
      }
    });
    // toolbarItems.push(btn_custom_layer);

    // Add button to delete a feature from pointLayer and kml table in dsi database
    var btn_del_feat = new Ext.Button({
      iconCls: 'del_feature_in_layer'
      ,tooltip: 'ลบข้อมูลออกจากฐานข้อมูล โดย click mouse ณ ตำแหน่งที่ต้องการลบ'
      ,enableToggle: true
      ,handler: function(toggled){
        if (toggled.pressed) {
          ctrl_popup_pointLayer.deactivate();
          del_feat_ctrl.activate();
        } else {
          ctrl_popup_pointLayer.activate();
          del_feat_ctrl.deactivate();
        }
      },
      toggleGroup: "map",
      pressed: false
    });
    // toolbarItems.push(btn_del_feat);

    toolbarItems.push("-");

    // Measure Length control

    action = Ext.create('GeoExt.Action',{
      control: new OpenLayers.Control.DrawFeature(vectorLayer, OpenLayers.Handler.Path, {
        eventListeners: {
          featureadded: function(feature) {
            length = feature.feature.geometry.getLength().toFixed(2);
            if (length >= 1000) {
              length = "ระยะทางรวม ประมาณ " + (length/1000).toFixed(2) + ' กิโลเมตร' ;
            } else {
              length = "ระยะทางรวม ประมาณ " + length + ' เมตร' ;
            }
              
            Ext.Msg.show({
              title: 'Result'
              ,msg: length
              ,buttons: Ext.Msg.OK
              ,icon: Ext.Msg.INFO
            });

          }
        }
      }),
      tooltip: 'วัดระยะทาง',
      map: map,
      iconCls: 'measure_length',
      toggleGroup: 'map'
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));


    // Measure Area control
    var calcArea = function(feature) {
      var area = feature.geometry.getArea().toFixed(2);
      var str = "";
      var rai = Math.floor(area/1600)
      var nang = Math.floor((area%1600)/400)
      var wa =  ((area%1600)%400)/4
      if (rai > 0) {
        str += " "+numberWithCommas(rai)+" ไร่"
      }
      if (nang > 0) {
        str += " "+numberWithCommas(nang.toFixed(2))+" งาน"
      }
      if (wa > 0) {
        str += " "+numberWithCommas(wa.toFixed(2))+" วา"
      }
      Ext.Msg.show({
        title: 'Result'
        ,msg: "พื้นที่รวม ประมาณ " + str
        ,buttons: Ext.Msg.OK
        ,icon: Ext.Msg.INFO
      });
    }
    var ctrl_measure_area = new OpenLayers.Control.DrawFeature(vectorLayer, OpenLayers.Handler.Polygon, {
      eventListeners: {
        featureadded: function(feature) {
          calcArea(feature.feature);
        }
      }
    });
    map.addControl(ctrl_measure_area);
    btn = Ext.create('Ext.button.Button', {
      tooltip: 'คำนวณพื้นที่',
      iconCls: 'measure_area',
      toggleGroup: 'map',
      listeners: {
        toggle: function(e) {

          if (e.pressed) {
            var points = [];
            _.each(vectorLayer.features, function(feature) {
              if (feature.data.type == 'gps' &&
                  feature.geometry.CLASS_NAME == 'OpenLayers.Geometry.Point') {
                points.push(feature.geometry);
              }
            })
            
            if (points.length > 2) {
              var ring = new OpenLayers.Geometry.LinearRing(points);
              var polygon = new OpenLayers.Geometry.Polygon([ring]);
              var feature = new OpenLayers.Feature.Vector(polygon)
              vectorLayer.addFeatures([feature]);
              calcArea(feature);
            } 
            ctrl_measure_area.activate();
          } else {
            ctrl_measure_area.deactivate()
          }
        }
      }
    });
    toolbarItems.push(btn);


    // Add Lat/Long Button
    var llgrid = null;
    button = Ext.create('Ext.Button',{
      tooltip: 'แสดง Lat/Long Grid',
      iconCls: 'grid1',
      enableToggle: true,
      handler: function() {
        var g = c = map.getControlsByClass("OpenLayers.Control.Graticule");
        if (g.length == 1) { // Graticule (Lat/Long Grid) is displayed in map
          llgrid.destroy();
          llgrid = null;
        } else { // No Graticule (Lat/Long Grid)
          llgrid = new OpenLayers.Control.Graticule({
            layerName: 'Lat/Long Grid',
            displayInLayerSwitcher: false,
            hideInTree: true,
            lineSymbolizer: {
              strokeColor: "#FFFFFF",
              strokeWidth: 1,
              strokeOpacity: 0.5,
            },
            labelSymbolizer: {
              fontColor: "#FFFF00",
              fontWeight: "bold"
            }
          });
          map.addControl(llgrid);
        }
      }
    });
    toolbarItems.push(button);

    // Add UTM Button
    button = Ext.create('Ext.Button',{
      tooltip: 'แสดง UTM Grid',
      iconCls: 'grid2',
      enableToggle: true,
      handler: function() {
        if (utmgrid.visibility == false)
          utmgrid.setVisibility(true);
        else
          utmgrid.setVisibility(false);
      }
    });
    toolbarItems.push(button);

    toolbarItems.push("-");

    // Direction
    function decodeLine (encoded) {
      var len = encoded.length;
      var index = 0;
      var array = [];
      var lat = 0;
      var lng = 0;

      while (index < len) {
        var b;
        var shift = 0;
        var result = 0;
        do {
          b = encoded.charCodeAt(index++) - 63;
          result |= (b & 0x1f) << shift;
          shift += 5;
        } while (b >= 0x20);
        var dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
        lat += dlat;

        shift = 0;
        result = 0;
        do {
          b = encoded.charCodeAt(index++) - 63;
          result |= (b & 0x1f) << shift;
          shift += 5;
        } while (b >= 0x20);
        var dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
        lng += dlng;

        array.push({longitude:lng * 1e-5, latitude:lat * 1e-5});
      }

      return array;
    }

    function showWinDirection(map, vectorLayer){
      vectorLayer.removeFeatures(
        _.select(vectorLayer.features, function(f){ 
          return f.data.type == 'direction_start' || f.data.type == 'direction_end' ||
            f.data.route == 'main' || f.data.route == 'sub'
      }));
      // new OpenLayers.Control.DragFeature(vectors)
      var drawFeature;
      var win = new Ext.Window({
        height: 150,
        width: 300,
        constrain: true,
        collapsible: true,
        layout: 'form',
        title: 'ค้นหาเส้นทาง',
        items: [
          {
            xtype: 'container',
            layout:'hbox',
            items: [{
                xtype: 'textfield',
                width: 220,
                id: 'direction_start',
                readOnly: true
              },
              Ext.create('Ext.Button',{
                text: 'จุดเริ่มต้น',
                handler: function() {
                  if (drawFeature) {
                    map.removeControl(drawFeature);
                    drawFeature.deactivate();
                    drawFeature = undefined
                  }
                  drawFeature = new OpenLayers.Control.DrawFeature(vectorLayer, 
                    OpenLayers.Handler.Point, { 
                      eventListeners: {
                        featureadded: function(feature,a){
                          vectorLayer.removeFeatures(
                            _.select(vectorLayer.features, function(f){ 
                              return f.data.type == 'direction_start'
                          }));
                          var feature = feature.feature;
                          feature.attributes.type = 'direction_start';
                          feature.data.type = 'direction_start';
                          vectorLayer.redraw()

                          var geom = feature.geometry.clone();
                          geom.transform(merc, gcs);
                          Ext.getCmp("direction_start").setValue(geom.y+","+geom.x);
                        }
                    }
                  })
                  map.addControl(drawFeature);
                  drawFeature.activate(true);
                }
            })]
          }, {
            xtype: 'container',
            layout:'hbox',
            items: [{
                xtype: 'textfield',
                id: 'direction_end',
                width: 220,
                readOnly: true
              },
              Ext.create('Ext.Button',{
                text: 'จุดสิ้นสุด',
                handler: function() {
                  if (drawFeature) {
                    map.removeControl(drawFeature);
                    drawFeature.deactivate();
                    drawFeature = undefined
                  }
                  drawFeature = new OpenLayers.Control.DrawFeature(vectorLayer, 
                    OpenLayers.Handler.Point, { 
                      eventListeners: {
                        featureadded: function(feature,a){
                          vectorLayer.removeFeatures(
                            _.select(vectorLayer.features, function(f){ 
                              return f.data.type == 'direction_end'
                          }));
                          var feature = feature.feature;
                          feature.attributes.type = 'direction_end';
                          feature.data.type = 'direction_end';
                          vectorLayer.redraw();
                          var geom = feature.geometry.clone();
                          geom.transform(merc, gcs);
                          Ext.getCmp("direction_end").setValue(geom.y+","+geom.x);
                        }
                    }
                  })
                  map.addControl(drawFeature);
                  drawFeature.activate(true);
                }
            })]
          }, {
            xtype: 'combo',
            allowBlank: false,
            id: 'route_selection',
            forceSelection: true,
            editable: false,
            disabled: true,
            fieldLabel: false,
            emptyText: 'เลือกเส้นทาง',
            store: new Ext.data.SimpleStore({
              fields: ['route', 'value'],
              data: []
            }),
            displayField: 'route',
            valueField: 'value',
            selectOnFocus: true,
            mode: 'local',
            triggerAction: 'all',
            listeners: {
              change: function( el, newValue, oldValue ){
                vectorLayer.removeFeatures(
                  _.select(vectorLayer.features, function(f){ 
                    return f.data.route == 'main' || f.data.route == 'sub'
                }));
                _.each(newValue, function(line){
                  vectorLayer.addFeatures([line]);
                });
              }
            }
          }
        ],
        buttons: [{
          text: 'ยืนยัน',
          handler: function() {
            $.ajax({
              url: Routes.google_direction_path(),
              dataType: 'json',
              type: 'GET',
              data: {
                start: Ext.getCmp("direction_start").getValue(),
                end: Ext.getCmp("direction_end").getValue()
              },
              success: $.proxy(function(res) {
                vectorLayer.removeFeatures(
                  _.select(vectorLayer.features, function(f){ 
                    return f.data.route == 'main' || f.data.route == 'sub'
                }));
                if (res.status == 'ZERO_RESULTS') {
                  alert("ไม่พบข้อมูล");
                  return false;
                }
                var decodeLine = this.decodeLine;
                var data = []
                _.each(res.routes, function(route, idx) {              
                  var distance = route.legs[0].distance.text;
                  var feature_routes = [];
                  _.each(route.legs[0].steps, function(step) {
                    points = _.map(polyline.decode(step.polyline.points), function(point) {
                      return new OpenLayers.Geometry.Point(point[1], point[0]).transform(gcs, merc);
                    });

                    var feature = new OpenLayers.Feature.Vector(
                          new OpenLayers.Geometry.LineString(points),
                          {route: 'main'});
                    feature_routes.push(feature)
                    // var feature = new OpenLayers.Feature.Vector(
                    //   new OpenLayers.Geometry.LineString(points),
                    //   {route: idx == 0 ? 'main' : 'sub'});
                    // vectorLayer.addFeatures([feature]);
                    if (drawFeature) {
                      map.removeControl(drawFeature);
                      drawFeature.deactivate();
                      drawFeature = undefined
                    }
                  })
                  data.push([distance, feature_routes])
                });
                route_selection = Ext.getCmp("route_selection");
                route_selection.enable();
                var store = new Ext.data.SimpleStore({
                  fields: ['route', 'value'],
                  data: data
                })
                route_selection.bindStore(store);
                route_selection.setValue(data[0]);
              },{decodeLine: decodeLine})
            });
          }
        },{
          text: 'ยกเลิก',
          handler: function() {
            if (drawFeature) {
              map.removeControl(drawFeature);
              drawFeature.deactivate();
              drawFeature = undefined
            }
            vectorLayer.removeFeatures(
              _.select(vectorLayer.features, function(f){ 
                return f.data.type == 'direction_start' || f.data.type == 'direction_end'  ||
                  f.data.route == 'main' || f.data.route == 'sub'
            }));
            win.close();
          }
        }],
        listeners: {
          close: function() {
            if (drawFeature) {
              map.removeControl(drawFeature);
              drawFeature.deactivate();
              drawFeature = undefined

            }
            vectorLayer.removeFeatures(
              _.select(vectorLayer.features, function(f){ 
                return f.data.type == 'direction_start' || f.data.type == 'direction_end' ||
                  f.data.route == 'main' || f.data.route == 'sub' 
            }));
          }
        }
      });
      win.show();
      var mapId = map.div.id;
      win.alignTo(Ext.getDom(mapId), 'tr-tr', [-150, 6]);
    }

    button = Ext.create('Ext.Button',{
      tooltip: 'ค้นหาเส้นทาง',
      iconCls: 'direction',
      enableToggle: true,
      handler: function() {
        showWinDirection(map, vectorLayer);
      }
    });
    toolbarItems.push(button);
    toolbarItems.push("-");
    // End Direction

    action = Ext.create('GeoExt.Action',{
       tooltip: "Previous view",
       control: ctrl.previous,
       iconCls: 'back',
       disabled: true
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));

    action = Ext.create('GeoExt.Action',{
      tooltip: "Next view",
      control: ctrl.next,
      iconCls: 'next',
      disabled: true
    });
    toolbarItems.push(Ext.create('Ext.button.Button', action));
    toolbarItems.push("->");

    // Add print Preview + Print Action ( Create PDF ERROR!!! )
    var printDialog, printProvider;

    // The PrintProvider that connects us to the print service
    printProvider = Ext.create('GeoExt.data.MapfishPrintProvider', {
      method: "GET", // "POST" recommended for production use
      capabilities: printCapabilities, // provide url instead for lazy loading
      customParams: {
        mapTitle: "GeoExt Printing Demo",
        comment: "This demo shows how to use GeoExt.PrintMapPanel"
      }
    });
    var btn_print = new Ext.Button({
      iconCls: 'print_preview',
      tooltip: 'ดูภาพ Preview และพิมพ์แผนที่ (กรุณา Zoom แผนที่ตามความต้องการอีกครั้ง)',
      handler: function(){
        printDialog = Ext.create('Ext.Window', {
          title: "<font color='#FF7000'>Print Preview</font>",
          id: 'id_printDialog',
          layout: "fit",
          width: 400,
          autoHeight: true,
          items: [{
            xtype: "gx_printmappanel",
            id: 'id_preview',
            sourceMap: mapPanel,
            printProvider: printProvider
          }],
          bbar: [{
            iconCls: 'print',
            tooltip: 'Print Map',
            //handler: function(){ printDialog.items.get(0).print(); }
            //ERROR: when preesing this button -->
            handler: function(){
              $("#id_preview-body").printElement({printMode:'popup'});
              //$("#id_preview").printArea();
              return false;
            }
          },'->',{
            iconCls: 'close',
            tooltip: 'Close',
            handler: function(){
              Ext.getCmp('id_printDialog').close();
            }
          }]
        });
        printDialog.center();
        printDialog.show();
      }
    });
    toolbarItems.push(btn_print);

    if(username){
      menu_items = [{
        text: "<b style='color:red'>Logout</b>",
        handler: function(){
          $("#sign_out").click();
        }
      }];
      // if(admin){
      //   menu_items.push({
      //     text: "จัดการผู้ใช้งาน",
      //     handler: function(){
      //       window.open(Routes.users_path());
      //     }
      //   })
      // }
      btn_logout = new Ext.Button({
        text: username,
        menu: {
          items: menu_items
        }
      })
      toolbarItems.push(btn_logout);
    }

    var numicon = new Ext.form.ComboBox({
      width: 55
      ,id: 'id_icon_num'
      ,emptyText: 'Icon'
      ,listConfig: {
        getInnerTpl: function() {
          // here you place the images in your combo
          var tpl = '<div>'+
                    '<img src="'+asset_prefix+'/{icon}.png" align="center" width="16" height="16" /></div>';
          return tpl;
        }
      }
      ,store : new Ext.data.SimpleStore({
        // Add more layers in dropdown here
        data : [['x1', '1'],['x2','2'],['x3','3'],['x4','4'],['x5','5'],['x6','6'],['x7','7'],['x8','8'],['x9','9']]
        ,id : 0
        ,fields : ['icon','text']
      })
      ,valueField : 'icon'
      ,displayField : 'text'
      ,triggerAction : 'all'
      ,editable : false
      ,name : 'icon_num'
      ,handler: function() {
        pointLayer.styleMap = styleMapNumber;
      }
    });
    //toolbarItems.push(numicon);

    var utmgrid = new OpenLayers.Layer.WMS(
      "UTM Grid",
      "http://map.dsi.go.th/cgi-bin/mapserv",
      {
        map: '/ms603/map/wms-thai.map',
        layers: "utm_wgs",
        transparent: true
      },
      { isBaseLayer: false, visibility: false}
    );
    utmgrid.displayInLayerSwitcher = false;
    utmgrid.hideInTree = true;
    utmgrid.setVisibility(false);

    // Add Bing Map
    bing_road = new OpenLayers.Layer.Bing({
      name: "Bing Road",
      key: apiKey,
      type: "Road",
      iconCls: 'bing'
    });
    bing_road.isBaseLayer = true;

    bing_hybrid = new OpenLayers.Layer.Bing({
      name: "Bing Hybrid",
      key: apiKey,
      type: "AerialWithLabels",
      iconCls: 'bing'
    });
    bing_hybrid.isBaseLayer = true;

    bing_aerial = new OpenLayers.Layer.Bing({
      name: "Bing Aerial",
      key: apiKey,
      type: "Aerial",
      iconCls: 'bing'
    });
    bing_aerial.isBaseLayer = true;

    mapPanel = Ext.create('GeoExt.panel.Map', {
      border: true,
      region: "center",
      margins: '5 5 0 0',
      map: map,
      center: dsi,
      zoom: 6,
      layers: [
        new OpenLayers.Layer.Vector("ATM กสิกรไทย", {
          projection: map.displayProjection,
          strategies: [new OpenLayers.Strategy.BBOX()],
          protocol: new OpenLayers.Protocol.HTTP({
              url: "<%= atm_kbank_layer_path %>",
              format: new OpenLayers.Format.GeoJSON({
                externalProjection: new OpenLayers.Projection("ESPG:4326"),
                internalProjection: new OpenLayers.Projection("ESPG:900913")
              })
          }),
          visibility: atm_value.bank_code == '004',
          displayInLayerSwitcher: (username)? true:false,
          styleMap: new OpenLayers.Style({
            pointRadius: 10,
            externalGraphic: "<%= asset_path("kbank.png") %>",
            label: '${getLabel}',
            labelYOffset: -14
          },{
            context: {
              getLabel: function(feature) {
                if(feature.layer.map.getZoom() > 12) {
                  return feature.attributes.SHORT_NAME;
                }
                else{
                  return "";
                }
              }
            }
          })
        }),
        new OpenLayers.Layer.Vector("ATM กรุงไทย", {
          projection: map.displayProjection,
          strategies: [new OpenLayers.Strategy.BBOX()],
          protocol: new OpenLayers.Protocol.HTTP({
              url: "<%= atm_ktb_layer_path %>",
              format: new OpenLayers.Format.GeoJSON({
                externalProjection: new OpenLayers.Projection("ESPG:4326"),
                internalProjection: new OpenLayers.Projection("ESPG:900913")
              })
          }),
          visibility: atm_value.bank_code == '006',
          displayInLayerSwitcher: (username)? true:false,
          styleMap: new OpenLayers.Style({
            pointRadius: 10,
            externalGraphic: "<%= asset_path("ktb.png") %>",
            label: '${getLabel}',
            labelYOffset: -14
          },{
            context: {
              getLabel: function(feature) {
                if(feature.layer.map.getZoom() > 12) {
                  return feature.attributes.SHORT_NAME;
                }
                else{
                  return "";
                }
              }
            }
          })
        }),

        // new OpenLayers.Layer.WMS(
        //   "ป่าชายเลน ปี 2552",
        //   "http://map.dsi.go.th/cgi-bin/mapserv",
        //   {map: '/ms603/map/wms-dsi.map', layers: 'mangrove_2552', transparent: true},
        //   {isBaseLayer: false,visibility: false}
        // ),
        // remove 2543 and 2530 by drtoon @ 20161109
        new OpenLayers.Layer.WMS(
          "ป่าชายเลน ปี 2543",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'mangrove_2543', transparent: true},
          {isBaseLayer: false,visibility: false}
        ),
        ////new OpenLayers.Layer.WMS(
          ////"ป่าชายเลน ปี 2530",
          ////"http://map.dsi.go.th/cgi-bin/mapserv",
          ////{map: '/ms603/map/wms-dsi.map', layers: 'mangrove_2530', transparent: true},
          ////{isBaseLayer: false,visibility: false}
        ////),
        new OpenLayers.Layer.WMS(
          "เขตป่าสงวน",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'rforest', transparent: true},
          {isBaseLayer: false,visibility: false, iconCls: 'rforest'}
        ),
        new OpenLayers.Layer.WMS(
          "เขตอุทยานแห่งชาติ",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'npark', transparent: true},
          {isBaseLayer: false,visibility: false, iconCls: 'npark'}
        ),
        new OpenLayers.Layer.WMS(
          "พื้นที่สปก.",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'no_22_spk', transparent: true},
          {isBaseLayer: false,visibility: false}
        ),
        new OpenLayers.Layer.WMS(
          "แหล่งแร่",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'no_14_mineral', transparent: true},
          {isBaseLayer: false,visibility: false}
        ),
        new OpenLayers.Layer.WMS(
          "ธรณีวิทยา",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'no_13_geology', transparent: true},
          {isBaseLayer: false,visibility: false}
        ),
        new OpenLayers.Layer.WMS(
          "หมู่บ้าน",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'no_06_muban', transparent: true},
          {isBaseLayer: false,visibility: false, iconCls: 'village', singleTile: true}
        ),
        new OpenLayers.Layer.WMS(
          "ตำบล",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'no_04_tambon', transparent: true},
          {isBaseLayer: false,visibility: false, iconCls: 'tambon'}
        ),
        new OpenLayers.Layer.WMS(
          "อำเภอ",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'no_03_amphoe', transparent: true},
          {isBaseLayer: false,visibility: false, iconCls: 'amphur'}
        ),
        new OpenLayers.Layer.WMS(
          "จังหวัด",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'no_02_province', transparent: true},
          {isBaseLayer: false,visibility: false, iconCls: 'changwat'}
        ),
        new OpenLayers.Layer.WMS(
          "ชั้นความสูง",
          "http://map.dsi.go.th/cgi-bin/mapserv",
          {map: '/ms603/map/wms-dsi.map', layers: 'contour', transparent: true},
          {isBaseLayer: false,visibility: false, iconCls: 'dem'}
        ),

        // bing_road, bing_hybrid, bing_aerial,

        new OpenLayers.Layer.Google(
          "Google Hybrid",
          {type: google.maps.MapTypeId.HYBRID, numZoomLevels: 20,sphericalMercator: true, iconCls: 'google' }
        ),
        new OpenLayers.Layer.Google(
          "Google Physical",
          {type: google.maps.MapTypeId.TERRAIN,sphericalMercator: true, iconCls: 'google' }
        ),

        utmgrid,

       /*
        new OpenLayers.Layer.Yahoo(
          "Yahoo Street",
          {sphericalMercator: true}
        ),
        new OpenLayers.Layer.Yahoo(
          "Yahoo Satellite",
          {'type': YAHOO_MAP_SAT, sphericalMercator: true}
        ),
        new OpenLayers.Layer.Yahoo(
          "Yahoo Hybrid",
          {'type': YAHOO_MAP_HYB, sphericalMercator: true}
        ),
        */

        hili,
        markers,
        vectorLayer

      ],
      dockedItems: [{
        xtype: 'toolbar',
        dock: 'top',
        cls: 'dsi-toolbar',
        items: toolbarItems
      }]
    });

    overlay = Ext.create('GeoExt.tree.OverlayLayerContainer',{
      loader: {
        filter: function(record) {
          var layer = record.getLayer();
          if (layer.hideIntree || layer.displayInLayerSwitcher == false){
            return false;
          } else {
          return !(layer.displayInLayerSwitcher === true &&
            layer.isBaseLayer === true);
          }
        }
      }
    });

    store = Ext.create('Ext.data.TreeStore', {
      model: 'GeoExt.data.LayerTreeModel',
      root: {
        expanded: true,
        children: [
          {
            plugins: ['gx_baselayercontainer'],
            expanded: false,
            text: "Base Maps"
          }, {
            plugins: [overlay],
            expanded: true
          }
        ]
        //children: tree_child
      }
    });

    ///////////////////////////////////
    // TREE
    ///////////////////////////////////
    tree = Ext.create('GeoExt.tree.Panel', {
      border: true,
      title: "เลือกชั้นข้อมูล",
      width: 250,
      split: true,
      collapsible: true,
      autoScroll: true,
      store: store,
      rootVisible: true,
      lines: false
    });

    panel_west = Ext.create("Ext.Panel",{
      region: 'west',
      // change marquee by drtoon 20161109
      //title: '<span class="logo"><font color="red">DSIMAP</font><br />กรมสอบสวนคดีพิเศษ</span><div class="marquee">ข้อมูลภาพแผนที่ใช้เพื่อการตรวจสอบข้อมูลเบื้องต้นเท่านั้น ...</div>',
      title: '<span class="logo"><font color="red">DSIMAP</font><br />กรมสอบสวนคดีพิเศษ</span>',
      width: 270,
      border: true,
      margins: '5 0 0 5',
      frame: false,
      split: true,
      layout: 'accordion',
      items: [
        tree,gps2,gps_utm,gps_utm_indian,searchquery,loadkml
      ], 
      listeners: {
        render: {
          fn: function() {
            this.header.insert(0,{
              xtype: 'panel',
              html: '<img src="'+asset_prefix+'/logo_dsi.png" width="50" height="65" />'
            });
          }
        }
      }
    });

    if (username) {
      panel_west.add(searchAtmKtb);
      panel_west.doLayout();
    }

    earth = Ext.create('Ext.Panel', {
      region: 'east'
      ,id: 'id_east'
      ,margins: '5 5 0 0'
      ,width: 400
      ,layout: 'fit'
      ,collapsible: true
      ,items: [
        {
          xtype: 'gxux_googleearthpanel'
          ,id: 'googleEarthPanelItem'
          ,map: map
          ,altitude: 50
          ,heading: 190
          ,tilt: 90
          ,range: 75
          ,streetViewControl: true
        }
      ]
    });

    Ext.create('Ext.Viewport', {
      layout: 'fit'
      ,hideBorders: true
      ,items: {
        layout: 'border'
        ,deferredRender: false
        //,items: [mapPanel, panel_west, earth]
        //,items: [mapPanel, panel_west]
        // change marquee by drtoon @ 20161109
        ,items: [
          mapPanel,
          panel_west,
          {
            xtype: "panel",
            region: "south",
            height: 30,
            html: '<div class="marquee" style="font-size:20px;height:30px;">ข้อมูลภาพแผนที่ใช้เพื่อการตรวจสอบข้อมูลเบื้องต้นเท่านั้น ...</div>'
          }
        ]
      }
    });

    // Set BaseLayer to bing_road
    // map.setBaseLayer(bing_road);

    // Add marquee animation here
    // $('.marquee').marquee();

    if (username) {
      var atm_ktb = map.getLayersByName("ATM กรุงไทย")[0];
      var selectedFeature_ktb;
      var selectControl_ktb = new OpenLayers.Control.SelectFeature(atm_ktb,
        {
          onSelect: function(feature) {

            selectedFeature_ktb = feature;
            popup = new OpenLayers.Popup.FramedCloud("chicken", 
              feature.geometry.getBounds().getCenterLonLat(),
              null,
              feature.attributes.SHORT_NAME,
              null, true, function(evt) {
                selectControl_ktb.unselect(selectedFeature_ktb);
              });
            feature.popup = popup;
            map.addPopup(popup);
          }, 
          onUnselect: function(feature) {
            map.removePopup(feature.popup);
            feature.popup.destroy();
            feature.popup = null;
          } });
      map.addControl(selectControl_ktb);
      selectControl_ktb.activate();

      var atm_kbank = map.getLayersByName("ATM กสิกรไทย")[0];
      var selectedFeature_kbank;
      var selectControl_kbank = new OpenLayers.Control.SelectFeature(atm_kbank,
        {
          onSelect: function(feature) {
            selectedFeature_kbank = feature;
            popup = new OpenLayers.Popup.FramedCloud("chicken", 
              feature.geometry.getBounds().getCenterLonLat(),
              null,
              feature.attributes.SHORT_NAME,
              null, true, function(evt) {
                selectControl_kbank.unselect(selectedFeature_kbank);
              });
            feature.popup = popup;
            map.addPopup(popup);
          }, 
          onUnselect: function(feature) {
            map.removePopup(feature.popup);
            feature.popup.destroy();
            feature.popup = null;
          } });  
      map.addControl(selectControl_kbank);
      selectControl_kbank.activate();
    
    }

    if( !isEmpty(atm_value) ){
      var center_atm = new OpenLayers.LonLat(atm_value.longitude, atm_value.latitude)
      center_atm = center_atm.transform(gcs,merc);
      map.setCenter(center_atm, 16);
    }

    // Add marquee animation here by drtoon @ 20161109
    $('.marquee').marquee({pauseOnHover: true, duration: 10000});
  }
});
